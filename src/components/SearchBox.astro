---
interface Props {
  placeholder?: string;
  name?: string;
  id?: string;
  value?: string;
}

const { 
  placeholder = "Search...", 
  name = "search",
  id = "search-input",
  value = ""
} = Astro.props;
---

<div class="search-container">
  <div class="search-box">
    <i class="search-icon">üîç</i>
    <input 
      type="text" 
      id={id}
      name={name}
      placeholder={placeholder}
      autocomplete="off"
      value={value}
    />
    <div class="suggestions-container" id="search-suggestions"></div>
  </div>
</div>

<style>
  .search-container {
    width: 100%;
    max-width: 600px;
    margin: 0 auto 2rem auto;
  }

  .search-box {
    position: relative;
    width: 100%;
  }

  .search-icon {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-muted);
    font-size: 1rem;
  }

  input {
    width: 100%;
    padding: 12px 12px 12px 40px;
    font-size: 1rem;
    border: 2px solid var(--color-accent-light);
    border-radius: 8px;
    background-color: var(--color-background-light);
    color: var(--color-text);
    transition: border-color 0.3s, box-shadow 0.3s;
  }

  input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
  }

  input::placeholder {
    color: var(--color-text-muted);
  }

  .suggestions-container {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    max-height: 300px;
    overflow-y: auto;
    background-color: var(--color-background-light);
    border: 2px solid var(--color-accent-light);
    border-top: none;
    border-radius: 0 0 8px 8px;
    z-index: 10;
    display: none;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .suggestions-container.show {
    display: block;
  }
</style>

<script>
  import { searchCharacters } from '../services/swapiService.js';
  
  const searchInput = document.getElementById('search-input');
  const suggestionsContainer = document.getElementById('search-suggestions');
  
  if (searchInput && suggestionsContainer) {
    let debounceTimeout;
    
    // Handle input changes with debounce
    searchInput.addEventListener('input', function() {
      const query = this.value.trim();
      
      // Clear previous timeout
      clearTimeout(debounceTimeout);
      
      // Clear suggestions if query is empty
      if (!query) {
        suggestionsContainer.innerHTML = '';
        suggestionsContainer.classList.remove('show');
        return;
      }
      
      // Set a new timeout
      debounceTimeout = setTimeout(async () => {
        // Fetch search results
        const results = await searchCharacters(query);
        
        // Clear previous suggestions
        suggestionsContainer.innerHTML = '';
        
        if (results && results.length > 0) {
          // Create and append suggestion items
          results.forEach(character => {
            const item = document.createElement('div');
            item.className = 'suggestion-item';
            item.textContent = character.name;
            
            // Handle suggestion click
            item.addEventListener('click', () => {
              searchInput.value = character.name;
              suggestionsContainer.innerHTML = '';
              suggestionsContainer.classList.remove('show');
              
              // Submit the form
              const form = searchInput.closest('form');
              if (form) {
                form.submit();
              } else {
                // Fallback - redirect with search query
                window.location.href = `/characters?search=${encodeURIComponent(character.name)}`;
              }
            });
            
            suggestionsContainer.appendChild(item);
          });
          
          suggestionsContainer.classList.add('show');
        } else {
          suggestionsContainer.classList.remove('show');
        }
      }, 300);
    });
    
    // Hide suggestions when clicking outside
    document.addEventListener('click', (event) => {
      if (!searchInput.contains(event.target) && 
          !suggestionsContainer.contains(event.target)) {
        suggestionsContainer.classList.remove('show');
      }
    });
    
    // Handle keydown for keyboard navigation
    searchInput.addEventListener('keydown', (event) => {
      const items = suggestionsContainer.querySelectorAll('.suggestion-item');
      
      if (!items.length) return;
      
      const activeItem = suggestionsContainer.querySelector('.suggestion-item.active');
      const isVisible = suggestionsContainer.classList.contains('show');
      
      // Handle arrow down
      if (event.key === 'ArrowDown' && isVisible) {
        event.preventDefault();
        
        if (!activeItem) {
          items[0].classList.add('active');
        } else {
          const nextItem = activeItem.nextElementSibling;
          if (nextItem) {
            activeItem.classList.remove('active');
            nextItem.classList.add('active');
          }
        }
      }
      
      // Handle arrow up
      if (event.key === 'ArrowUp' && isVisible) {
        event.preventDefault();
        
        if (activeItem) {
          const prevItem = activeItem.previousElementSibling;
          activeItem.classList.remove('active');
          
          if (prevItem) {
            prevItem.classList.add('active');
          }
        }
      }
      
      // Handle Enter key
      if (event.key === 'Enter' && isVisible && activeItem) {
        event.preventDefault();
        searchInput.value = activeItem.textContent;
        suggestionsContainer.classList.remove('show');
        
        // Submit the form
        const form = searchInput.closest('form');
        if (form) {
          form.submit();
        } else {
          // Fallback - redirect with search query
          window.location.href = `/characters?search=${encodeURIComponent(searchInput.value)}`;
        }
      }
      
      // Handle Escape key
      if (event.key === 'Escape' && isVisible) {
        suggestionsContainer.classList.remove('show');
      }
    });
  }
</script>

<style is:global>
  .suggestion-item {
    padding: 10px 16px;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .suggestion-item:hover,
  .suggestion-item.active {
    background-color: var(--color-accent-light);
  }
</style>